#pragma once

#include <stdbool.h>
#include <stdint.h>
#include <string.h>

/*
 * The ca_config struct allows configuration of flags,
 * e.g. setting which flags require values, or what bit a flag corresponds to
 * When configuration is complete, the user can parse the arguments using that ca_config
 */
typedef struct ca_config ca_config;

/*
 * The ca_info struct contains actual info about the provided arguments
 * It is generated by parsing an argument list
 * Info about flags can be queried using this struct
 */
typedef struct ca_info ca_info;

/* 
 * Creates and initializes a new ca_config struct
 * When done, this struct should be lc_free'd using ca_free_config
 */
ca_config *ca_alloc_config();

/*
 * lc_free ca_config struct
 * This struct should have been previously allocated usiong ca_alloc_config
 */
void ca_free_config(ca_config *cfg);

/*
 * Stores the bit value for a certain flag string
 * Since it might be possible for a flag to set multiple bit, uint64_t is used instead of a bit shift amount
 * Example use: ca_bind_flag(cfg, "-v", 0x2) --> The "-v" flag should set only the second bit
 */
void ca_bind_flag(ca_config *cfg, const char *flag_name, uint64_t flag_val);

/*
 * Set that flag requires a value
 * Values can be provided in 2 ways:
 * -flag=value
 * -flag value
 * In both cases, the user should inform the program this flag requires a value using this function
 */
void ca_set_hasv(ca_config *cfg, const char *flag_name);

/*
 * Parse flags based on provided configuration
 * Any unknown arguments (not defined as flags) will be stored as literals
 * Returns a ca_info struct containing relevant information about the parsed flags
 * When not needed anymore, the struct should be lc_free'd using ca_free_info
 * This function does not modify argv
 */
ca_info *ca_parse(ca_config *cfg, int argc, char **argv);

/*
 * lc_free ca_info struct
 * This struct should first have been allocated by the ca_parse function
 */
void ca_free_info(ca_info *info);

/* 
 * Get a list of all literals (any argument that is not a defined flag or value belonging to a flag)
 * The length of this list is put into the count argument
 * The list should not be directly modified
 */
const char **ca_literals(ca_info *info, size_t *count);

/*
 * Get the bits the parsed flags corresponded to as a uint64_t
 * To define these bits, use ca_bind_flag during configuration
 */
uint64_t ca_flags(ca_info *info);

/*
 * Check if flag was found in the argument list
 * It does not matter if the flag has a value or not
 */
bool ca_is_set(ca_info *info, const char *flag_name);

/* 
 * Return value for provided flag name
 * If flag does not exist, or does not have a value, returns NULL
 * Do not directly modify the returned string
 */
const char *ca_flag_value(ca_info *info, const char *flag_name);
